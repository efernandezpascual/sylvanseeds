seedplot <- function(df) {
ggplot(df, aes(x = as.factor(Temperature), y = mean, ymin = lower, ymax = upper, fill = Experiment)) +
geom_bar(stat = "identity", alpha = 0.6, show.legend = FALSE) +
geom_errorbar(aes(color = Experiment), width = 0.1, size = 1,
position = position_dodge(.9), show.legend = FALSE) +
coord_cartesian(ylim = c(0, 1)) +
labs(title = unique(df$Species), subtitle = "Seed germination records") +
ylab(label = "Germination proportion") + xlab(label = "Average germination temperature (ÂºC)") +
theme(text = element_text(size = 8),
plot.title = element_text(face = c("italic"), size = 12)) +
facet_wrap( ~ Experiment, scales = "free", ncol = 4)
}
Germination %>%
filter(Species == "Quercus robur") %>%
seedplot()
Germination %>%
filter(Species == Species)
Species <- "Quercus robur"
Germination %>%
filter(Species == Species)
sp <- "Quercus robur"
Germination %>%
filter(Species == Species)
Germination %>%
filter(Species == sp)
Germination %>%
filter(Species == sp) -> df
seedplot(df)
GerminationWoS %>% summary
WoSGermination %>% summary
WoSGermination %>%
filter(Species == sp) %>%
select(Country, Accession, Latitude, Longitude)
WoSGermination %>%
filter(Species == sp) %>%
select(Country, Latitude, Longitude) %>%
unique
WoSGermination %>%
filter(Species == sp) %>%
select(Source)
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
merge(References) -> refs
refs
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
merge(References) %>%
unique -> refs
Germination %>%
filter(Species == sp) -> seeds
WoSGermination %>%
filter(Species == sp) %>%
select(Country, Latitude, Longitude) %>%
unique -> places
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
merge(References) %>%
unique -> references
seedplot(seeds)
references
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
merge(References) %>%
unique %>%
as_tibble -> references
references
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
rename(ReferenceID = Source) %>%
merge(References) %>%
unique %>%
as_tibble -> references
references
library(raster); library(sp)
library(maps); library(mapdata); library(rgdal)
library(plyr)
readOGR(dsn = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/WWF",
layer = "wwf_terr_ecos") -> Ecoregions
rownames(Ecoregions@data) -> Ecoregions@data$id
fortify(Ecoregions, region = "id") -> Ecoregions.points
join(Ecoregions.points, Ecoregions@data, by = "id") %>%
inner_join(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/Biomes.csv"), by = "BIOME")  ->
Ecoregions.df
places %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(Header) -> WWFshape
places %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(places) -> WWFshape
WWFshape
WWFshape %>%
filter(! Ecoregion %in% c("Cascade Mountains leeward forests", "Central and Southern Cascades forests", "Eastern Cascades forests")) %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = Ecoregions.df, aes(x = long, y = lat,
group =  group), fill = "gainsboro", color = "gainsboro")	+
geom_polygon(data = subset(Ecoregions.df, BIOME == 4), aes(x = long, y = lat,
group =  group), fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = .5, alpha = 0.5) +
coord_cartesian(xlim = c(-150, 180), ylim = c(25, 65)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
#  filter(! Ecoregion %in% c("Cascade Mountains leeward forests", "Central and Southern Cascades forests", "Eastern Cascades forests")) %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = Ecoregions.df, aes(x = long, y = lat,
group =  group), fill = "gainsboro", color = "gainsboro")	+
geom_polygon(data = subset(Ecoregions.df, BIOME == 4), aes(x = long, y = lat,
group =  group), fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = .5, alpha = 0.5) +
coord_cartesian(xlim = c(-150, 180), ylim = c(25, 65)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank()) -> Map
Map
join(Ecoregions.points, Ecoregions@data, by = "id") %>%
inner_join(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/Biomes.csv"), by = "BIOME")  ->
filter(BIOME == 4) %>%
Ecoregions.df
Ecoregions.df
subset(Ecoregions.df, BIOME == 4)
join(Ecoregions.points, Ecoregions@data, by = "id") %>%
inner_join(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/Biomes.csv"), by = "BIOME") %>%
filter(BIOME == 4) ->
Ecoregions.df
WoSGermination %>%
dplyr::select(Species, Country, Latitude, Longitude) %>%
unique %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(places) -> Places
Places
WoSGermination
WoSGermination %>%
dplyr::select(Species, Country, Latitude, Longitude) %>%
unique
WoSGermination %>%
dplyr::select(Species, Country, Latitude, Longitude) %>%
unique -> places
places %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(places) -> Places
readOGR(dsn = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/WWF",
layer = "wwf_terr_ecos") -> Ecoregions
rownames(Ecoregions@data) -> Ecoregions@data$id
fortify(Ecoregions, region = "id") -> Ecoregions.points
join(Ecoregions.points, Ecoregions@data, by = "id") %>%
inner_join(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/Biomes.csv"), by = "BIOME") %>%
filter(BIOME == 4) ->
TBMF
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 2, alpha = 0.5) +
coord_cartesian(xlim = c(-150, 180), ylim = c(25, 65)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 2, alpha = 0.9) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-80, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_point(color = "gold", size = 2, alpha = 0.9) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-80, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 2, alpha = 0.9) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-60, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 3, alpha = 0.8) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-60, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WWFshape %>%
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 3, alpha = 0.8) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-55, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
WoSGermination %>% summary
read.xlsx("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Forests/3 - Trait DB/Populations.xlsx")
Populations %>% summary
read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Joint/SGDB.csv") %>%
filter(! Duplicated %in% TRUE &
Database == "Forest" &
! Source %in% c("MSB", "ENSCOBASE") &
! GA3 %in% "Y" &
! is.na(Germinated)) %>%
mutate(Germinated = ifelse(Germinated > Germinable, Germinable, Germinated)) %>%
merge(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/Stratification.csv"), all = TRUE) %>%
select(Species, Source, Year, Country, Accession, Latitude, Longitude,
Scarification, Stratification_days, Stratification_type, Stratification,
Light, Photoperiod, Alternating, Tdif,
Tmax, Tmin, Tmean, Temperature,
Germinated, Germinable) %>%
rename(ReferenceID = Source,
PopulationID = Accession) -> WoSGermination
read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Joint/SGDB.csv") %>%
filter(! Duplicated %in% TRUE &
Database == "Forest" &
! Source %in% c("MSB", "ENSCOBASE") &
! GA3 %in% "Y" &
! is.na(Germinated)) %>%
mutate(Germinated = ifelse(Germinated > Germinable, Germinable, Germinated)) %>%
merge(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/Stratification.csv"), all = TRUE) %>%
dplyr::select(Species, Source, Year, Country, Accession, Latitude, Longitude,
Scarification, Stratification_days, Stratification_type, Stratification,
Light, Photoperiod, Alternating, Tdif,
Tmax, Tmin, Tmean, Temperature,
Germinated, Germinable) %>%
rename(ReferenceID = Source,
PopulationID = Accession) -> WoSGermination
read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Joint/SGDB.csv") %>%
filter(! Duplicated %in% TRUE &
Database == "Forest" &
! Source %in% c("MSB", "ENSCOBASE") &
! GA3 %in% "Y" &
! is.na(Germinated)) %>%
mutate(Germinated = ifelse(Germinated > Germinable, Germinable, Germinated)) %>%
merge(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/Stratification.csv"), all = TRUE) %>%
dplyr::select(Species, Source, Year, Country, Accession, Latitude, Longitude,
Scarification, Stratification_days, Stratification_type, Stratification,
Light, Photoperiod, Alternating, Tdif,
Tmax, Tmin, Tmean, Temperature,
Germinated, Germinable) %>%
dplyr::rename(ReferenceID = Source,
PopulationID = Accession)
library(tidyverse); library(openxlsx)
read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Joint/SGDB.csv") %>%
filter(! Duplicated %in% TRUE &
Database == "Forest" &
! Source %in% c("MSB", "ENSCOBASE") &
! GA3 %in% "Y" &
! is.na(Germinated)) %>%
mutate(Germinated = ifelse(Germinated > Germinable, Germinable, Germinated)) %>%
merge(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/Stratification.csv"), all = TRUE) %>%
dplyr::select(Species, Source, Year, Country, Accession, Latitude, Longitude,
Scarification, Stratification_days, Stratification_type, Stratification,
Light, Photoperiod, Alternating, Tdif,
Tmax, Tmin, Tmean, Temperature,
Germinated, Germinable) %>%
dplyr::rename(ReferenceID = Source,
PopulationID = Accession) -> WoSDB
References <- read.xlsx("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Forests/3 - Trait DB/References.xlsx")
Populations <- read.xlsx("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/SGDB/Forests/3 - Trait DB/Populations.xlsx")
read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Taxonomy/Names REVISED.csv") %>%
mutate(Name = paste(Genus, Species)) %>%
filter(Name %in% unique(WoSDB$Species)) -> Names
# Now for the metanalysis of proportions
library(tidyverse); library(metafor); library(binom); library(data.table)
# A function to metanalize proportions...
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = Germinated, ni = Germinable, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
# Data grouped by experimental and species
WoSDB %>%
mutate(group = paste(Species, Scarification, Stratification_type,
Light, Alternating, Temperature, sep = "_")) %>%
data.table(.) -> df
# First we check for which groups the metanalysis works...
listd <- split(df, by = "group", drop = TRUE)
ms <- lapply(listd, function(d) tryCatch(metanalize(d), error = function(e) e))
rma.works <- names(ms)[lapply(ms, length) >= 3]
# Now we do the MA for the species that work
df.rma <- df[group %in% rma.works]
df.rma %>%
group_by(group) %>%
do(metanalize(.)) %>%
group_by -> rma.species
# And for the rest, we simply calculate the proportions and CI
df[! group %in% rma.works] %>%
group_by(group) %>%
summarise(Germinated = sum(Germinated), Germinable = sum(Germinable)) %>%
data.frame -> GermDF
cbind(group = GermDF[, 1],
binom.confint(GermDF$Germinated, GermDF$Germinable, method = "wilson")[, 4:6]) %>%
as_tibble()-> germdf
rbind(germdf, rma.species)  %>%
separate(group, into = c("Species", "Scarification", "Stratification_type",
"Light", "Alternating", "Temperature"), sep = "_",
convert = TRUE) %>%
mutate(Light = ifelse(is.na(Light), "Light unknown", Light),
Species = as.factor(Species),
Scarification = as.factor(Scarification),
Stratification_type = as.factor(Stratification_type),
Light = as.factor(Light),
Alternating = as.factor(Alternating),
Scarification = recode_factor(Scarification, "N" = "Unscarified", "Y" = "Scarified"),
Stratification_type = recode_factor(Stratification_type, "C+W" = "C+W-stratified",
"Cold" = "Cold-stratified",
"None" = "Non-stratified",
"W+C" = "W+C-stratified",
"Warm" = "Warm-stratified"),
Light = recode_factor(Light, "N" = "Darkness", "Y" = "Light"),
Alternating = recode_factor(Alternating, "N" = "Constant temperature",
"Y" = "Alternating temperature"),
Experiment = paste(Light, Alternating, Stratification_type, Scarification, sep = ",\n"),
Experiment = as.factor(Experiment)) %>%
rename(Stratification = Stratification_type) -> Germination
# Biome map
library(raster); library(sp)
library(maps); library(mapdata); library(rgdal)
library(plyr)
# Prepare WWF shapefile
readOGR(dsn = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/WWF",
layer = "wwf_terr_ecos") -> Ecoregions
rownames(Ecoregions@data) -> Ecoregions@data$id
fortify(Ecoregions, region = "id") -> Ecoregions.points
join(Ecoregions.points, Ecoregions@data, by = "id") %>%
inner_join(read.csv("C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Joined DB/Raw/Map/Biomes.csv"), by = "BIOME") %>%
filter(BIOME == 4) ->
TBMF
WoSDB %>%
dplyr::select(Species, Country, Latitude, Longitude) %>%
unique -> coordinates
coordinates %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(places) -> Places
save(Germination, WoSDB, Names, Populations, References, Places, TBMF,
file = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/WoSDB.RData")
coordinates %>%
dplyr::select(Longitude, Latitude) %>%
SpatialPoints(proj4string = CRS(proj4string(Ecoregions))) %over% Ecoregions %>%
cbind(coordinates) -> Places
save(Germination, WoSDB, Names, Populations, References, Places, TBMF,
file = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/WoSDB.RData")
Places %>%
filter(Species == sp)
library(tidyverse)
load(file = "C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/WoS DB cleaning/WoSDB.RData")
Germination %>% summary
sp <- "Quercus robur"
Places %>%
filter(Species == sp) -> seeds
Places %>%
filter(Species == sp)
Places %>%
filter(Species == sp) -> places
Germination %>%
filter(Species == sp) -> seeds
WoSGermination %>%
filter(Species == sp) %>%
select(Source) %>%
rename(ReferenceID = Source) %>%
merge(References) %>%
unique %>%
as_tibble -> references
WoSDB %>%
filter(Species == sp) %>%
select(Source) %>%
rename(ReferenceID = Source) %>%
merge(References) %>%
unique %>%
as_tibble -> references
WoSDB %>%
filter(Species == sp) %>%
select(ReferenceID) %>%
merge(References) %>%
unique %>%
as_tibble -> references
references
mapplot <- function(df) {
ggplot(aes(x = Longitude, y = Latitude)) +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 3, alpha = 0.8) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-55, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
}
seedplot <- function(df) {
ggplot(df, aes(x = as.factor(Temperature), y = mean, ymin = lower, ymax = upper, fill = Experiment)) +
geom_bar(stat = "identity", alpha = 0.6, show.legend = FALSE) +
geom_errorbar(aes(color = Experiment), width = 0.1, size = 1,
position = position_dodge(.9), show.legend = FALSE) +
coord_cartesian(ylim = c(0, 1)) +
labs(title = unique(df$Species), subtitle = "Seed germination records") +
ylab(label = "Germination proportion") + xlab(label = "Average germination temperature (ÂºC)") +
theme(text = element_text(size = 8),
plot.title = element_text(face = c("italic"), size = 12)) +
facet_wrap( ~ Experiment, scales = "free", ncol = 4)
}
seedplot(seeds)
mapplot(places)
mapplot <- function(df) {
ggplot(df, aes(x = Longitude, y = Latitude)) +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group),
color = "gainsboro", fill = "gainsboro") +
geom_polygon(data = TBMF, aes(x = long, y = lat,group =  group),
fill = "darkolivegreen4", color = "darkolivegreen4") +
geom_point(color = "gold", size = 3, alpha = 0.8) +
coord_cartesian(xlim = c(-150, 180), ylim = c(-55, 80)) +
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank())
}
seedplot <- function(df) {
ggplot(df, aes(x = as.factor(Temperature), y = mean, ymin = lower, ymax = upper, fill = Experiment)) +
geom_bar(stat = "identity", alpha = 0.6, show.legend = FALSE) +
geom_errorbar(aes(color = Experiment), width = 0.1, size = 1,
position = position_dodge(.9), show.legend = FALSE) +
coord_cartesian(ylim = c(0, 1)) +
labs(title = unique(df$Species), subtitle = "Seed germination records") +
ylab(label = "Germination proportion") + xlab(label = "Average germination temperature (ÂºC)") +
theme(text = element_text(size = 8),
plot.title = element_text(face = c("italic"), size = 12)) +
facet_wrap( ~ Experiment, scales = "free", ncol = 4)
}
mapplot(places)
shiny::runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Sylvan Seeds: Germination database of temperate broadleaf and mixed forests"),
# Sidebar to choose species to display
sidebarLayout(
sidebarPanel(helpText("Select a species to display germination records."),
selectInput("var",
label = "Species:",
choices = "LOL",
selected = "LOL")
),
# Show a plot of the germination records
mainPanel(
plotOutput("plot_map"),
plotOutput("plot_germination")
)
)
)
runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
shiny::runApp('C:/EFP/Trabayu/Activos/2018 FICYT3/GT1 Traits/Forests/WoS DB publication/sylvanseeds')
